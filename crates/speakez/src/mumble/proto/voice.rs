// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Audio {
    /// The session of the client (sender) this audio was originally sent from. This field is not required when sending
    /// audio to the server, but will always be set when receiving audio from the server.
    #[prost(uint32, tag = "3")]
    pub sender_session: u32,
    /// The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
    #[prost(uint64, tag = "4")]
    pub frame_number: u64,
    /// The actual voice data payload in the Opus format.
    #[prost(bytes = "vec", tag = "5")]
    pub opus_data: ::prost::alloc::vec::Vec<u8>,
    /// Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
    /// expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
    #[prost(float, repeated, tag = "6")]
    pub positional_data: ::prost::alloc::vec::Vec<f32>,
    /// A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
    /// the resulting audio (or not). Note: A value of 0 means that this field is unset.
    #[prost(float, tag = "7")]
    pub volume_adjustment: f32,
    /// A flag indicating whether this audio packet represents the end of transmission for the current audio stream
    #[prost(bool, tag = "16")]
    pub is_terminator: bool,
    #[prost(oneof = "audio::Header", tags = "1, 2")]
    pub header: ::core::option::Option<audio::Header>,
}
/// Nested message and enum types in `Audio`.
pub mod audio {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Header {
        /// When this audio is sent by the client to the server, this is set to the target of the audio data. This target
        /// is a number in the range \[0, 2^{32} - 1\], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
        /// and all other targets are understood as shout/whisper targets that have previously been registered via a
        /// VoiceTarget message (via TCP).
        #[prost(uint32, tag = "1")]
        Target(u32),
        /// When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
        /// 0: Normal speech
        /// 1: Shout to channel
        /// 2: Whisper to user
        /// 3: Received via channel listener
        #[prost(uint32, tag = "2")]
        Context(u32),
    }
}
/// *
/// Ping message for checking UDP connectivity (and roundtrip ping) and potentially obtaining further server
/// details (e.g. version).
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ping {
    /// Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
    /// clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
    #[prost(uint64, tag = "1")]
    pub timestamp: u64,
    /// A flag set by the sending client, if it wants to obtain additional information about the server.
    #[prost(bool, tag = "2")]
    pub request_extended_information: bool,
    /// The version of the server in the new version format.
    /// The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
    /// since both server and client have to support this new format.
    /// (See <https://github.com/mumble-voip/mumble/issues/5827>)
    #[prost(uint64, tag = "3")]
    pub server_version_v2: u64,
    /// The amount of users currently connected to the server
    #[prost(uint32, tag = "4")]
    pub user_count: u32,
    /// The maximum amount of users permitted on this server
    #[prost(uint32, tag = "5")]
    pub max_user_count: u32,
    /// The maximum bandwidth each user is allowed to use for sending audio to the server
    #[prost(uint32, tag = "6")]
    pub max_bandwidth_per_user: u32,
}

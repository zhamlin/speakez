import "@preact/signals";
import { useMemo as e } from "preact/hooks";
import { Signal as t, signal as r, computed as n } from "@preact/signals-core";
var a = new WeakMap(),
	o = new WeakMap(),
	s = new WeakMap(),
	u = new WeakSet(),
	c = new WeakMap(),
	f = /^\$/,
	i = Object.getOwnPropertyDescriptor,
	l = !1,
	g = function (e) {
		if (!k(e)) throw new Error("This object can't be observed.");
		return o.has(e) || o.set(e, v(e, d)), o.get(e);
	},
	p = function (e, t) {
		l = !0;
		var r = e[t];
		try {
			l = !1;
		} catch (e) {}
		return r;
	};
function h(e) {
	return u.add(e), e;
}
var v = function (e, t) {
		var r = new Proxy(e, t);
		return u.add(r), r;
	},
	y = function () {
		throw new Error("Don't mutate the signals directly.");
	},
	w = function (e) {
		return function (t, u, c) {
			var g;
			if (l) return Reflect.get(t, u, c);
			var p = e || "$" === u[0];
			if (!e && p && Array.isArray(t)) {
				if ("$" === u) return s.has(t) || s.set(t, v(t, m)), s.get(t);
				p = "$length" === u;
			}
			a.has(c) || a.set(c, new Map());
			var h = a.get(c),
				y = p ? u.replace(f, "") : u;
			if (
				h.has(y) ||
				"function" != typeof (null == (g = i(t, y)) ? void 0 : g.get)
			) {
				var w = Reflect.get(t, y, c);
				if (p && "function" == typeof w) return;
				if ("symbol" == typeof y && b.has(y)) return w;
				h.has(y) ||
					(k(w) && (o.has(w) || o.set(w, v(w, d)), (w = o.get(w))),
					h.set(y, r(w)));
			} else
				h.set(
					y,
					n(function () {
						return Reflect.get(t, y, c);
					}),
				);
			return p ? h.get(y) : h.get(y).value;
		};
	},
	d = {
		get: w(!1),
		set: function (e, n, s, u) {
			var l;
			if ("function" == typeof (null == (l = i(e, n)) ? void 0 : l.set))
				return Reflect.set(e, n, s, u);
			a.has(u) || a.set(u, new Map());
			var g = a.get(u);
			if ("$" === n[0]) {
				s instanceof t || y();
				var p = n.replace(f, "");
				return g.set(p, s), Reflect.set(e, p, s.peek(), u);
			}
			var h = s;
			k(s) && (o.has(s) || o.set(s, v(s, d)), (h = o.get(s)));
			var w = !(n in e),
				m = Reflect.set(e, n, s, u);
			return (
				g.has(n) ? (g.get(n).value = h) : g.set(n, r(h)),
				w && c.has(e) && c.get(e).value++,
				Array.isArray(e) &&
					g.has("length") &&
					(g.get("length").value = e.length),
				m
			);
		},
		deleteProperty: function (e, t) {
			"$" === t[0] && y();
			var r = a.get(o.get(e)),
				n = Reflect.deleteProperty(e, t);
			return (
				r && r.has(t) && (r.get(t).value = void 0),
				c.has(e) && c.get(e).value++,
				n
			);
		},
		ownKeys: function (e) {
			return (
				c.has(e) || c.set(e, r(0)), (c._ = c.get(e).value), Reflect.ownKeys(e)
			);
		},
	},
	m = { get: w(!0), set: y, deleteProperty: y },
	b = new Set(
		Object.getOwnPropertyNames(Symbol)
			.map(function (e) {
				return Symbol[e];
			})
			.filter(function (e) {
				return "symbol" == typeof e;
			}),
	),
	R = new Set([Object, Array]),
	k = function (e) {
		return (
			"object" == typeof e && null !== e && R.has(e.constructor) && !u.has(e)
		);
	},
	M = function (t) {
		return e(function () {
			return g(t);
		}, []);
	};
export { g as deepSignal, p as peek, h as shallow, M as useDeepSignal };
